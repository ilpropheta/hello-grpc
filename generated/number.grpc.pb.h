// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: number.proto
#ifndef GRPC_number_2eproto__INCLUDED
#define GRPC_number_2eproto__INCLUDED

#include "number.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class NumberService final {
 public:
  static constexpr char const* service_full_name() {
    return "NumberService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Next(::grpc::ClientContext* context, const ::NumberRequest& request, ::NumberResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NumberResponse>> AsyncNext(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NumberResponse>>(AsyncNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NumberResponse>> PrepareAsyncNext(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NumberResponse>>(PrepareAsyncNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::RangeResponse>> Range(::grpc::ClientContext* context, const ::RangeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::RangeResponse>>(RangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RangeResponse>> AsyncRange(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RangeResponse>>(AsyncRangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RangeResponse>> PrepareAsyncRange(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RangeResponse>>(PrepareAsyncRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::SumRequest>> Sum(::grpc::ClientContext* context, ::SumResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::SumRequest>>(SumRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SumRequest>> AsyncSum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SumRequest>>(AsyncSumRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SumRequest>> PrepareAsyncSum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SumRequest>>(PrepareAsyncSumRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Range(::grpc::ClientContext* context, const ::RangeRequest* request, ::grpc::ClientReadReactor< ::RangeResponse>* reactor) = 0;
      #else
      virtual void Range(::grpc::ClientContext* context, const ::RangeRequest* request, ::grpc::experimental::ClientReadReactor< ::RangeResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Sum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::ClientWriteReactor< ::SumRequest>* reactor) = 0;
      #else
      virtual void Sum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::experimental::ClientWriteReactor< ::SumRequest>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NumberResponse>* AsyncNextRaw(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NumberResponse>* PrepareAsyncNextRaw(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::RangeResponse>* RangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::RangeResponse>* AsyncRangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::RangeResponse>* PrepareAsyncRangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::SumRequest>* SumRaw(::grpc::ClientContext* context, ::SumResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::SumRequest>* AsyncSumRaw(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::SumRequest>* PrepareAsyncSumRaw(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Next(::grpc::ClientContext* context, const ::NumberRequest& request, ::NumberResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NumberResponse>> AsyncNext(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NumberResponse>>(AsyncNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NumberResponse>> PrepareAsyncNext(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NumberResponse>>(PrepareAsyncNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::RangeResponse>> Range(::grpc::ClientContext* context, const ::RangeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::RangeResponse>>(RangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::RangeResponse>> AsyncRange(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::RangeResponse>>(AsyncRangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::RangeResponse>> PrepareAsyncRange(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::RangeResponse>>(PrepareAsyncRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::SumRequest>> Sum(::grpc::ClientContext* context, ::SumResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::SumRequest>>(SumRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::SumRequest>> AsyncSum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::SumRequest>>(AsyncSumRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::SumRequest>> PrepareAsyncSum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::SumRequest>>(PrepareAsyncSumRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Range(::grpc::ClientContext* context, const ::RangeRequest* request, ::grpc::ClientReadReactor< ::RangeResponse>* reactor) override;
      #else
      void Range(::grpc::ClientContext* context, const ::RangeRequest* request, ::grpc::experimental::ClientReadReactor< ::RangeResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Sum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::ClientWriteReactor< ::SumRequest>* reactor) override;
      #else
      void Sum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::experimental::ClientWriteReactor< ::SumRequest>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NumberResponse>* AsyncNextRaw(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NumberResponse>* PrepareAsyncNextRaw(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::RangeResponse>* RangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request) override;
    ::grpc::ClientAsyncReader< ::RangeResponse>* AsyncRangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::RangeResponse>* PrepareAsyncRangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::SumRequest>* SumRaw(::grpc::ClientContext* context, ::SumResponse* response) override;
    ::grpc::ClientAsyncWriter< ::SumRequest>* AsyncSumRaw(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::SumRequest>* PrepareAsyncSumRaw(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Next_;
    const ::grpc::internal::RpcMethod rpcmethod_Range_;
    const ::grpc::internal::RpcMethod rpcmethod_Sum_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Next(::grpc::ServerContext* context, const ::NumberRequest* request, ::NumberResponse* response);
    virtual ::grpc::Status Range(::grpc::ServerContext* context, const ::RangeRequest* request, ::grpc::ServerWriter< ::RangeResponse>* writer);
    virtual ::grpc::Status Sum(::grpc::ServerContext* context, ::grpc::ServerReader< ::SumRequest>* reader, ::SumResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Next : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Next() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Next() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Next(::grpc::ServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNext(::grpc::ServerContext* context, ::NumberRequest* request, ::grpc::ServerAsyncResponseWriter< ::NumberResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Range() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::RangeRequest* /*request*/, ::grpc::ServerWriter< ::RangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRange(::grpc::ServerContext* context, ::RangeRequest* request, ::grpc::ServerAsyncWriter< ::RangeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sum() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Sum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sum(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SumRequest>* /*reader*/, ::SumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSum(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::SumResponse, ::SumRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Next<WithAsyncMethod_Range<WithAsyncMethod_Sum<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Next : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Next() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::NumberRequest, ::NumberResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NumberRequest* request, ::NumberResponse* response) { return this->Next(context, request, response); }));}
    void SetMessageAllocatorFor_Next(
        ::grpc::experimental::MessageAllocator< ::NumberRequest, ::NumberResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NumberRequest, ::NumberResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Next() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Next(::grpc::ServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Next(
      ::grpc::CallbackServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Next(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Range() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::RangeRequest, ::RangeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::RangeRequest* request) { return this->Range(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::RangeRequest* /*request*/, ::grpc::ServerWriter< ::RangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::RangeResponse>* Range(
      ::grpc::CallbackServerContext* /*context*/, const ::RangeRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::RangeResponse>* Range(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::RangeRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Sum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Sum() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::SumRequest, ::SumResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::SumResponse* response) { return this->Sum(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_Sum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sum(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SumRequest>* /*reader*/, ::SumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::SumRequest>* Sum(
      ::grpc::CallbackServerContext* /*context*/, ::SumResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::SumRequest>* Sum(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::SumResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Next<ExperimentalWithCallbackMethod_Range<ExperimentalWithCallbackMethod_Sum<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Next<ExperimentalWithCallbackMethod_Range<ExperimentalWithCallbackMethod_Sum<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Next : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Next() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Next() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Next(::grpc::ServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Range() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::RangeRequest* /*request*/, ::grpc::ServerWriter< ::RangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sum() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Sum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sum(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SumRequest>* /*reader*/, ::SumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Next : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Next() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Next() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Next(::grpc::ServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Range() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::RangeRequest* /*request*/, ::grpc::ServerWriter< ::RangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sum() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Sum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sum(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SumRequest>* /*reader*/, ::SumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSum(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Next : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Next() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Next(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Next() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Next(::grpc::ServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Next(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Next(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Range() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Range(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::RangeRequest* /*request*/, ::grpc::ServerWriter< ::RangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Range(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Range(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Sum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Sum() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->Sum(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Sum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sum(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SumRequest>* /*reader*/, ::SumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Sum(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* Sum(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Next : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Next() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NumberRequest, ::NumberResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NumberRequest, ::NumberResponse>* streamer) {
                       return this->StreamedNext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Next() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Next(::grpc::ServerContext* /*context*/, const ::NumberRequest* /*request*/, ::NumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NumberRequest,::NumberResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Next<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Range() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::RangeRequest, ::RangeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::RangeRequest, ::RangeResponse>* streamer) {
                       return this->StreamedRange(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::RangeRequest* /*request*/, ::grpc::ServerWriter< ::RangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRange(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::RangeRequest,::RangeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Range<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Next<WithSplitStreamingMethod_Range<Service > > StreamedService;
};


#endif  // GRPC_number_2eproto__INCLUDED
