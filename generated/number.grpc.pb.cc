// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: number.proto

#include "number.pb.h"
#include "number.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* NumberService_method_names[] = {
  "/NumberService/Next",
  "/NumberService/Range",
  "/NumberService/Sum",
};

std::unique_ptr< NumberService::Stub> NumberService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NumberService::Stub> stub(new NumberService::Stub(channel));
  return stub;
}

NumberService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Next_(NumberService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Range_(NumberService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Sum_(NumberService_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status NumberService::Stub::Next(::grpc::ClientContext* context, const ::NumberRequest& request, ::NumberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NumberRequest, ::NumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Next_, context, request, response);
}

void NumberService::Stub::experimental_async::Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NumberRequest, ::NumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Next_, context, request, response, std::move(f));
}

void NumberService::Stub::experimental_async::Next(::grpc::ClientContext* context, const ::NumberRequest* request, ::NumberResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Next_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NumberResponse>* NumberService::Stub::PrepareAsyncNextRaw(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NumberResponse, ::NumberRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Next_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NumberResponse>* NumberService::Stub::AsyncNextRaw(::grpc::ClientContext* context, const ::NumberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::RangeResponse>* NumberService::Stub::RangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::RangeResponse>::Create(channel_.get(), rpcmethod_Range_, context, request);
}

void NumberService::Stub::experimental_async::Range(::grpc::ClientContext* context, const ::RangeRequest* request, ::grpc::experimental::ClientReadReactor< ::RangeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::RangeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Range_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::RangeResponse>* NumberService::Stub::AsyncRangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::RangeResponse>::Create(channel_.get(), cq, rpcmethod_Range_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::RangeResponse>* NumberService::Stub::PrepareAsyncRangeRaw(::grpc::ClientContext* context, const ::RangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::RangeResponse>::Create(channel_.get(), cq, rpcmethod_Range_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::SumRequest>* NumberService::Stub::SumRaw(::grpc::ClientContext* context, ::SumResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::SumRequest>::Create(channel_.get(), rpcmethod_Sum_, context, response);
}

void NumberService::Stub::experimental_async::Sum(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::experimental::ClientWriteReactor< ::SumRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::SumRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Sum_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::SumRequest>* NumberService::Stub::AsyncSumRaw(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::SumRequest>::Create(channel_.get(), cq, rpcmethod_Sum_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::SumRequest>* NumberService::Stub::PrepareAsyncSumRaw(::grpc::ClientContext* context, ::SumResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::SumRequest>::Create(channel_.get(), cq, rpcmethod_Sum_, context, response, false, nullptr);
}

NumberService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NumberService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NumberService::Service, ::NumberRequest, ::NumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NumberService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NumberRequest* req,
             ::NumberResponse* resp) {
               return service->Next(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NumberService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NumberService::Service, ::RangeRequest, ::RangeResponse>(
          [](NumberService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RangeRequest* req,
             ::grpc::ServerWriter<::RangeResponse>* writer) {
               return service->Range(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NumberService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< NumberService::Service, ::SumRequest, ::SumResponse>(
          [](NumberService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::SumRequest>* reader,
             ::SumResponse* resp) {
               return service->Sum(ctx, reader, resp);
             }, this)));
}

NumberService::Service::~Service() {
}

::grpc::Status NumberService::Service::Next(::grpc::ServerContext* context, const ::NumberRequest* request, ::NumberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NumberService::Service::Range(::grpc::ServerContext* context, const ::RangeRequest* request, ::grpc::ServerWriter< ::RangeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NumberService::Service::Sum(::grpc::ServerContext* context, ::grpc::ServerReader< ::SumRequest>* reader, ::SumResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


